{"version":3,"sources":["Components/ArrayVisualizerElement/ArrayVisualizerElement.module.sass","Components/ArrayVisualizer/ArrayVisualizer.module.sass","logo.svg","Components/ArrayVisualizerElement/ArrayVisualizerElement.js","Utilities/ArrayUtil/ArrayUtil.js","Utilities/SortingUtil/MergeSort.js","Components/ArrayVisualizer/ArrayVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ArrayVisualizerElement","isActive","height","width","className","Styles","style","arrayMove","array","oldIndex","newIndex","newArray","slice","length","k","push","undefined","splice","sort","left","right","steps","middle","parseInt","leftArray","concat","rightArray","mergedInfo","i","j","console","log","step","elements","index","merge","nextStep","forEach","element","createElements","currentStep","range","lenght","map","e","find","max","key","delay","ms","Promise","res","setTimeout","ArrayVisualizer","useState","setArray","setSteps","isChange","setCurrentStep","setFinalArray","arrayElements","useEffect","randomArray","Array","from","Math","round","random","min","generateArray","bubbleSorted","mergeSort","handleStartAnimation","a","oldArray","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb2b3107.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"array-visualizer__element\":\"ArrayVisualizerElement_array-visualizer__element__2MM93\",\"array-visualizer__element--active\":\"ArrayVisualizerElement_array-visualizer__element--active__xdVx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"array-visualizer\":\"ArrayVisualizer_array-visualizer__2psUf\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Styles from './ArrayVisualizerElement.module.sass';\r\n\r\nfunction ArrayVisualizerElement({ isActive, height, width }) {\r\n    return (\r\n        <div className={`${Styles['array-visualizer__element']} ${isActive && Styles['array-visualizer__element--active']}`} style={{ \"height\": `${height}%`, \"width\": `${width}%` }}>\r\n            &nbsp;\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizerElement;","export function arrayMove(array, oldIndex, newIndex) {\r\n    var newArray = array.slice(0);      // prevents pass by reference\r\n    if (newIndex >= newArray.length) {\r\n        var k = newIndex - newArray.length + 1;\r\n        while (k--) {\r\n            newArray.push(undefined);\r\n        }\r\n    }\r\n    newArray.splice(newIndex, 0, newArray.splice(oldIndex, 1)[0]);\r\n    return newArray;\r\n};","import { arrayMove } from '../ArrayUtil/ArrayUtil';\r\n\r\nexport default function sort(array, left, right) {\r\n    var newArray = array.slice(0);      // prevents pass by reference\r\n    var steps = [];\r\n\r\n    if (left < right) {\r\n        const middle = (parseInt((right - left) / 2) + left);\r\n\r\n        const leftArray = sort(newArray, left, middle);\r\n        newArray = leftArray.newArray;\r\n        steps = steps.concat(leftArray.steps);\r\n        const rightArray = sort(newArray, middle + 1, right);\r\n        newArray = rightArray.newArray;\r\n        steps = steps.concat(rightArray.steps);\r\n        const mergedInfo = merge(newArray, left, middle, right);\r\n        newArray = mergedInfo.newArray\r\n        steps = steps.concat(mergedInfo.steps);\r\n\r\n        console.log(mergedInfo);\r\n        console.log(steps);\r\n    }\r\n    return { newArray, steps };\r\n}\r\n\r\nfunction merge(array, left, middle, right) {\r\n    var newArray = array.slice(0);      // prevents pass by reference\r\n    var steps = [];\r\n\r\n    var i = left;\r\n    var j = middle + 1;\r\n    if (left == 0 && middle == 4 && right == 9) {\r\n        console.log();\r\n    }\r\n    while (i <= middle && j <= right) {\r\n        var step = {\r\n            elements: []\r\n        }\r\n        if (newArray[j] < newArray[i]) {\r\n            step.elements.push({ index: j, newIndex: i });\r\n            step.elements.push({ index: i+1, newIndex: i+1 });\r\n            newArray = arrayMove(newArray, j, i);\r\n            j++\r\n            middle++;\r\n        }\r\n        else\r\n        {\r\n            step.elements.push({ index: i, newIndex: i });\r\n            step.elements.push({ index: j, newIndex: j });\r\n        }\r\n        i++;\r\n        steps.push(step);\r\n    }\r\n    return { newArray, steps };\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Styles from './ArrayVisualizer.module.sass';\r\nimport ArrayVisualizerElement from '../ArrayVisualizerElement/ArrayVisualizerElement';\r\nimport bubbleSort from '../../Utilities/SortingUtil/BubbleSort';\r\nimport mergeSort from '../../Utilities/SortingUtil/MergeSort';\r\nimport { arrayMove } from '../../Utilities/ArrayUtil/ArrayUtil';\r\n\r\nconst generateArray = (lenght, range) => {\r\n    return Array.from(Array(lenght)).map(e => Math.round(Math.random() * (range.max - range.min) + range.min));\r\n}\r\n\r\nconst nextStep = ({ elements }, array) => {\r\n    var newArray = array.slice(0);\r\n    elements.forEach(element => {\r\n        newArray = arrayMove(newArray, element.index, element.newIndex);\r\n    });\r\n\r\n    return newArray;\r\n}\r\n\r\nconst createElements = (array, currentStep, range, lenght) => {\r\n    const arrayElements = array.map((e, i) => {\r\n        return (\r\n            <ArrayVisualizerElement isActive={currentStep.elements.find(e => e.index === i)} height={(e / range.max) * 100} width={(1 / lenght) * 100} key={i} />\r\n        );\r\n    });\r\n    return arrayElements;\r\n}\r\n\r\nconst delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nfunction ArrayVisualizer({ lenght, range }) {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [steps, setSteps] = useState([]);\r\n    const [currentStep, setCurrentStep] = useState({ elements: [], isChange: false });\r\n    const [finalArray, setFinalArray] = useState([]);\r\n\r\n    var arrayElements = createElements(array, currentStep, range, lenght);\r\n\r\n    useEffect(() => {\r\n        const randomArray = generateArray(lenght, range);\r\n        setArray(randomArray);\r\n        console.log(\"array\", randomArray);\r\n        // const merge = mergeSort(randomArray, 0, (randomArray.length - 1));\r\n        // const sort = randomArray.sort((a, b) => a - b)\r\n        // console.log(\"merge\", merge);\r\n\r\n        const bubbleSorted = mergeSort(randomArray, 0, (randomArray.length - 1));\r\n        setFinalArray(bubbleSorted.newArray);\r\n        setSteps(bubbleSorted.steps);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        arrayElements = createElements(array, currentStep, range, lenght);\r\n    }, [currentStep, array]);\r\n\r\n    const handleStartAnimation = async () => {\r\n        var oldArray = array;\r\n        console.log(steps, array);\r\n        for (const step of steps) {\r\n            setCurrentStep(step);\r\n            const newArray = nextStep(step, oldArray)\r\n            setArray(newArray);\r\n            oldArray = newArray;\r\n            await delay(10);\r\n        }\r\n        setCurrentStep({ elements: [], isChange: false });\r\n        setSteps([]);\r\n    }\r\n\r\n    return (\r\n        <div className={Styles['array-visualizer']}>\r\n            {arrayElements}\r\n            <div onClick={() => handleStartAnimation()}>start</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ArrayVisualizer from './Components/ArrayVisualizer/ArrayVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArrayVisualizer lenght={100} range={{ min: 5, max: 1000 }} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}