{"version":3,"sources":["Components/ArrayVisualizerElement/ArrayVisualizerElement.module.sass","Components/ArrayVisualizer/ArrayVisualizer.module.sass","logo.svg","Components/ArrayVisualizerElement/ArrayVisualizerElement.js","Components/ArrayVisualizer/ArrayVisualizer.js","Utilities/SortingUtil/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ArrayVisualizerElement","isActive","height","width","className","Styles","style","nextStep","array","elements","isChange","newArray","slice","temp","createElements","currentStep","range","lenght","map","e","i","includes","max","key","delay","ms","Promise","res","setTimeout","ArrayVisualizer","useState","setArray","steps","setSteps","setCurrentStep","setFinalArray","arrayElements","useEffect","randomArray","Array","from","Math","round","random","min","generateArray","bubbleSorted","length","j","step","push","bubbleSort","handleStartAnimation","a","oldArray","console","log","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82c15d96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"array-visualizer__element\":\"ArrayVisualizerElement_array-visualizer__element__2MM93\",\"array-visualizer__element--active\":\"ArrayVisualizerElement_array-visualizer__element--active__xdVx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"array-visualizer\":\"ArrayVisualizer_array-visualizer__2psUf\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Styles from './ArrayVisualizerElement.module.sass';\r\n\r\nfunction ArrayVisualizerElement({ isActive, height, width }) {\r\n    return (\r\n        <div className={`${Styles['array-visualizer__element']} ${isActive && Styles['array-visualizer__element--active']}`} style={{ \"height\": `${height}%`, \"width\": `${width}%` }}>\r\n            &nbsp;\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizerElement;","import React, { useState, useEffect } from 'react';\r\nimport Styles from './ArrayVisualizer.module.sass';\r\nimport ArrayVisualizerElement from '../ArrayVisualizerElement/ArrayVisualizerElement';\r\nimport bubbleSort from '../../Utilities/SortingUtil/BubbleSort';\r\n\r\nconst generateArray = (lenght, range) => {\r\n    return Array.from(Array(lenght)).map(e => Math.round(Math.random() * (range.max - range.min) + range.min));\r\n}\r\n\r\nconst nextStep = ({ elements, isChange }, array) => {\r\n    var newArray = array.slice(0);\r\n    if (isChange) {\r\n        const temp = newArray[elements[0]];\r\n        newArray[elements[0]] = newArray[elements[1]];\r\n        newArray[elements[1]] = temp;\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\nconst createElements = (array, currentStep, range, lenght) => {\r\n    const arrayElements = array.map((e, i) => {\r\n        return (\r\n            <ArrayVisualizerElement isActive={currentStep.elements.includes(i)} height={(e / range.max) * 100} width={(1 / lenght) * 100} key={i} />\r\n        );\r\n    });\r\n    return arrayElements;\r\n}\r\n\r\nconst delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nfunction ArrayVisualizer({ lenght, range }) {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [steps, setSteps] = useState([]);\r\n    const [currentStep, setCurrentStep] = useState({ elements: [], isChange: false });\r\n    const [finalArray, setFinalArray] = useState([]);\r\n\r\n    var arrayElements = createElements(array, currentStep, range, lenght);\r\n\r\n    useEffect(() => {\r\n        const randomArray = generateArray(lenght, range);\r\n        setArray(randomArray);\r\n\r\n        const bubbleSorted = bubbleSort(randomArray);\r\n        setFinalArray(bubbleSorted.newArray);\r\n        setSteps(bubbleSorted.steps);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        arrayElements = createElements(array, currentStep, range, lenght);\r\n    }, [currentStep, array]);\r\n\r\n    const handleStartAnimation = async () => {\r\n        var oldArray = array;\r\n        console.log(steps, array);\r\n        for (const step of steps) {\r\n            setCurrentStep(step);\r\n            const newArray = nextStep(step, oldArray)\r\n            setArray(newArray);\r\n            oldArray = newArray;\r\n            await delay(20);\r\n        }\r\n        setCurrentStep({ elements: [], isChange: false });\r\n    }\r\n\r\n    return (\r\n        <div className={Styles['array-visualizer']}>\r\n            {arrayElements}\r\n            <div onClick={() => handleStartAnimation()}>start</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizer;","export default function (array) {\r\n    var newArray = array.slice(0);      // prevents pass by reference\r\n    var steps = [];\r\n    for (var i = 0; i < newArray.length - 1; i++) {\r\n        for (var j = 0; j < newArray.length - i - 1; j++) {\r\n            var step = {\r\n                elements: [j, j + 1],\r\n                isChange: false\r\n            }\r\n\r\n            if (newArray[j] > newArray[j + 1]) {\r\n                var temp = newArray[j];\r\n                newArray[j] = newArray[j + 1];\r\n                newArray[j + 1] = temp;\r\n\r\n                step.isChange = true;\r\n            }\r\n            steps.push(step);\r\n        }\r\n    }\r\n    // console.log(steps);\r\n    return { newArray, steps };\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ArrayVisualizer from './Components/ArrayVisualizer/ArrayVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArrayVisualizer lenght={100} range={{ min: 5, max: 1000 }} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}